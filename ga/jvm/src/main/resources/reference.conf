rest {
  host : "0.0.0.0"
  port : 8050
}
# the target number to find
target = 100
# the input numbers which we can use to find the target number
from = []

# the maximum size of our population - we'll 'kill/cull' values which don't make this threshold
maxPopulationSize = 200

# the minimum size of our equation (e.g. 3 elements)
minEquationSize = 3

# the maximum size we'll allow our equation to be. Setting this to zero (or a negative number)
# means unbounded - we will/can use all the 'from' numbers
maxEquationSize = 0

# if we don't find a solution within this many generations then we'll quit
maxGenerations = 200

# the percent chance (represented as a real number between 0.0 and 1.0) that we'll mutate an offspring
mutationProbability = 0.01

# the seed number to use for random values. Empty values are interpretted as 'use the current time' (e.g. random)
seed = ""

# if set to true then we'll show each generation's population
debug = false

# the html output settings
output {
  # if non-empty, then an html representation of the solution will be written under this directory (relative or absolute)
  dir = ""

  # if a non-empty 'dir' is given, then this is the limit of the number of nodes to render/display
  maxNodes = 20
}